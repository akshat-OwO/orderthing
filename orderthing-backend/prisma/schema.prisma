// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    STAFF
}

model User {
    id        String     @id @default(cuid())
    firstName String
    lastName  String
    email     String     @unique
    password  String
    role      Role       @default(USER)
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    orders    Order[]
    CartItem  CartItem[]
    Table     Table[]
}

model Category {
    id   String @id @default(cuid())
    name String
    Item Item[]
}

model OrderItem {
    id        String   @id @default(cuid())
    order     Order    @relation(fields: [orderId], references: [id])
    orderId   String
    item      Item     @relation(fields: [itemId], references: [id])
    itemId    String
    quantity  Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([orderId, itemId])
}

model Item {
    id          String      @id @default(cuid())
    name        String      @unique
    description String
    price       Float
    image       String
    category    Category    @relation(fields: [categoryId], references: [id])
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    categoryId  String
    orderItems  OrderItem[]
    CartItem    CartItem[]
}

model Order {
    id          String      @id @default(cuid())
    tableNumber Int
    orderItems  OrderItem[]
    userId      String
    user        User        @relation(fields: [userId], references: [id])
    amount      Float
    completed   Boolean     @default(false)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

model CartItem {
    id        String   @id @default(cuid())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    item      Item     @relation(fields: [itemId], references: [id])
    itemId    String
    quantity  Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, itemId])
}

model Table {
    id     String  @id @default(cuid())
    number Int     @unique
    user   User?   @relation(fields: [userId], references: [id])
    userId String?

    @@unique([number, userId])
}
